#!/usr/bin/env groovy

import de.kistner_media.ScmOrigin

def dockerImage
def buildImage
def project          = ''
def sonarQubeEnv     = 'SonarQube'
def sonarQubeProject = ''

pipeline {
    agent {
        kubernetes {
            yamlFile 'build/kubernetes-agent.yaml'
        }
    }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: '30',
                numToKeepStr: '10',
                artifactDaysToKeepStr: '30',
                artifactNumToKeepStr: '10'
            )
        )
        disableConcurrentBuilds()
        gitLabConnection('GitLab')
        gitlabBuilds(builds: ['static-code-test', 'build'])
    }

    stages {
        stage('Init') {
            steps {
                script {
                    def scmOrigin = new ScmOrigin(env.GIT_URL)
                    scmOrigin.setCurrentEnvironment(BRANCH_NAME)

                    project             = scmOrigin.getPathAsArray().join('-')
                    sonarQubeProject    = project + '-' + scmOrigin.getCurrentEnvironment()
                    dockerImage         = scmOrigin.getDockerImagePath() + '/' + scmOrigin.getCurrentEnvironment()
                    buildImage          = dockerImage + ':' + env.BUILD_NUMBER
                }
            }
        }

        stage('Static test and build') {
            parallel {
                stage('Static Code Test') {
                    steps {
                        gitlabCommitStatus('static-code-test') {
                            script {
                                withSonarQubeEnv(sonarQubeEnv) {
                                    container('sonar-scanner') {
                                        script {
                                            sh "sonar-scanner -Dsonar.projectKey=${sonarQubeProject} -Dsonar.projectVersion=${BUILD_NUMBER}"
                                        }
                                    }
                                }

                                timeout(time: 1, unit: 'HOURS') {
                                    def qg = waitForQualityGate()
                                    if (qg.status != 'OK') {
                                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Build Container') {
                    steps {
                        gitlabCommitStatus('build') {
                            withCredentials([string(credentialsId: 'vagrantup', variable: 'access_token')]) {
                                withCredentials([usernamePassword(credentialsId: env.GITLAB_CREDENTIALS, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                    container('podman') {
                                        script {
                                            sh "podman login -u $GIT_USERNAME -p $GIT_PASSWORD $env.DOCKER_REGISTRY_URI"
                                            sh "podman run --rm -v ./:/workspace -w /workspace -e TOKEN=$access_token $env.DOCKER_REGISTRY_URI/docker/packer/main packer build ./packer.pkr.hcl";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            emailext body: '$DEFAULT_CONTENT', recipientProviders: [requestor(), upstreamDevelopers()], subject: '$DEFAULT_SUBJECT'
        }
    }
}
